syntax = "proto3";

option go_package = "github.com/hyperledger-labs/yui-ibc-solidity/pkg/ibc/core/channel";

import "core/02-client/Client.proto";
import "solidity-protobuf-extensions.proto";
option (.solidity.file_options) = { location: "@hyperledger-labs/yui-ibc-solidity/contracts/proto" };

import "gogoproto/gogo.proto";

// Channel defines pipeline for exactly-once packet delivery between specific
// modules on separate blockchains, which has at least one end capable of
// sending packets and one end capable of receiving packets.
message Channel {
  option (gogoproto.goproto_getters) = false;

  // State defines if a channel is in one of the following states:
  // CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or UNINITIALIZED.
  enum State {
    option (gogoproto.goproto_enum_prefix) = false;

    // Default State
    STATE_UNINITIALIZED_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "UNINITIALIZED"];
    // A channel has just started the opening handshake.
    STATE_INIT = 1 [(gogoproto.enumvalue_customname) = "INIT"];
    // A channel has acknowledged the handshake step on the counterparty chain.
    STATE_TRYOPEN = 2 [(gogoproto.enumvalue_customname) = "TRYOPEN"];
    // A channel has completed the handshake. Open channels are
    // ready to send and receive packets.
    STATE_OPEN = 3 [(gogoproto.enumvalue_customname) = "OPEN"];
    // A channel has been closed and can no longer be used to send or receive
    // packets.
    STATE_CLOSED = 4 [(gogoproto.enumvalue_customname) = "CLOSED"];
    // A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
    STATE_FLUSHING = 5 [(gogoproto.enumvalue_customname) = "FLUSHING"];
    // A channel has just completed flushing any in-flight packets.
    STATE_FLUSHCOMPLETE = 6 [(gogoproto.enumvalue_customname) = "FLUSHCOMPLETE"];
  }

  // Order defines if a channel is ORDERED or UNORDERED
  enum Order {
    option (gogoproto.goproto_enum_prefix) = false;

    // zero-value for channel ordering
    ORDER_NONE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "NONE"];
    // packets can be delivered in any order, which may differ from the order in
    // which they were sent.
    ORDER_UNORDERED = 1 [(gogoproto.enumvalue_customname) = "UNORDERED"];
    // packets are delivered exactly in the order which they were sent
    ORDER_ORDERED = 2 [(gogoproto.enumvalue_customname) = "ORDERED"];
  }

  // Counterparty defines a channel end counterparty
  message Counterparty {
    option (gogoproto.goproto_getters) = false;

    // port on the counterparty chain which owns the other end of the channel.
    string port_id = 1 [(gogoproto.moretags) = "yaml:\"port_id\""];
    // channel end on the counterparty chain
    string channel_id = 2 [(gogoproto.moretags) = "yaml:\"channel_id\""];
  }

  // current state of the channel end
  State state = 1;
  // whether the channel is ordered or unordered
  Order ordering = 2;
  // counterparty channel end
  Counterparty counterparty = 3 [(gogoproto.nullable) = false];
  // list of connection identifiers, in order, along which packets sent on
  // this channel will travel
  repeated string connection_hops = 4 [(gogoproto.moretags) = "yaml:\"connection_hops\""];
  // opaque channel version, which is agreed upon during the handshake
  string version = 5;
  // upgrade sequence indicates the latest upgrade attempt performed by this channel
  // the value of 0 indicates the channel has never been upgraded
  uint64 upgrade_sequence = 6;
}

// -------- Upgrades -------- //

// Timeout defines an execution deadline structure for 04-channel handlers.
// This includes packet lifecycle handlers as well as the upgrade handshake handlers.
// A valid Timeout contains either one or both of a timestamp and block height (sequence).
message Timeout {
  // block height after which the packet or upgrade times out
  Height height = 1 [(gogoproto.nullable) = false];
  // block timestamp (in nanoseconds) after which the packet or upgrade times out
  uint64 timestamp = 2;
}

// Upgrade is a verifiable type which contains the relevant information
// for an attempted upgrade. It provides the proposed changes to the channel
// end, the timeout for this upgrade attempt and the next packet sequence
// which allows the counterparty to efficiently know the highest sequence it has received.
// The next sequence send is used for pruning and upgrading from unordered to ordered channels.
message Upgrade {
  option (gogoproto.goproto_getters) = false;

  UpgradeFields fields             = 1 [(gogoproto.nullable) = false];
  Timeout       timeout            = 2 [(gogoproto.nullable) = false];
  uint64        next_sequence_send = 3;
}

// UpgradeFields are the fields in a channel end which may be changed
// during a channel upgrade.
message UpgradeFields {
  option (gogoproto.goproto_getters) = false;

  Channel.Order           ordering        = 1;
  repeated string connection_hops = 2;
  string          version         = 3;
}

// ErrorReceipt defines a type which encapsulates the upgrade sequence and error associated with the
// upgrade handshake failure. When a channel upgrade handshake is aborted both chains are expected to increment to the
// next sequence.
message ErrorReceipt {
  option (gogoproto.goproto_getters) = false;

  // the channel upgrade sequence
  uint64 sequence = 1;
  // the error message detailing the cause of failure
  string message = 2;
}
